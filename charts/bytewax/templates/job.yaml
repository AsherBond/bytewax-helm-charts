{{- if (.Values.configuration.jobMode) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "bytewax.labels" . | nindent 4 }}  
spec:
  completions: {{ .Values.configuration.processesCount }}
  parallelism: {{ .Values.configuration.processesCount }}
  completionMode: Indexed
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bytewax.selectorLabels" . | nindent 8 }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}      
    spec:
      restartPolicy: Never
      subdomain: {{ .Release.Name }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bytewax.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      initContainers:
      - name: init-hostfile
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}      
        env:
        - name: BYTEWAX_REPLICAS
          value: "{{ .Values.configuration.processesCount }}"
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          # Generate hostfile.txt.
          echo "{{ .Release.Name }}-0.{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}" > /etc/bytewax/hostfile.txt
          replicas=$(($BYTEWAX_REPLICAS-1))
          x=1
          while [ $x -le $replicas ]
          do
            echo "{{ .Release.Name }}-$x.{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}" >> /etc/bytewax/hostfile.txt
            x=$(( $x + 1 ))
          done
          # Copy python files to working directory
          cp /tmp/bytewax/. /var/bytewax -R
          cd /var/bytewax
          tar -xvf *.tar || echo "No tar files found."
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
        - name: python-files          
{{- if (.Values.configuration.configMap.files.tarName) }}
          mountPath: /tmp/bytewax/{{ .Values.configuration.configMap.files.tarName }}
          subPath: {{ .Values.configuration.configMap.files.tarName }}
{{- else }}
          mountPath: /tmp/bytewax/
{{- end }}
{{- range .Values.extraVolumeMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          subPath: {{ .subPath | default "" }}
          readOnly: {{ .readOnly }}
{{- end }}
      terminationGracePeriodSeconds: 10
      containers:
      - name: process    
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh","-c","sh ./entrypoint.sh"]
        ports:
        - containerPort: {{ .Values.service.port }}
          name: process
        env:
        - name: RUST_LOG
          value: "librdkafka=debug,rdkafka::client=debug"
        - name: RUST_BACKTRACE
          value: "full"
        - name: BYTEWAX_PYTHON_FILE_PATH
          value: "/var/bytewax/{{ .Values.configuration.pythonFileName }}"
        - name: BYTEWAX_WORKDIR
          value: "/var/bytewax"
        - name: BYTEWAX_WORKERS_PER_PROCESS
          value: "{{ .Values.configuration.workersPerProcess }}"
        - name: BYTEWAX_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['batch.kubernetes.io/job-completion-index']
        - name: BYTEWAX_REPLICAS
          value: "{{ .Values.configuration.processesCount }}"
        - name: BYTEWAX_KEEP_CONTAINER_ALIVE
          value: "false"
        - name: BYTEWAX_HOSTFILE_PATH
          value: "/etc/bytewax/hostfile.txt"
        - name: BYTEWAX_STATEFULSET_NAME
          value: "{{ .Release.Name }}"
{{- range $key, $value := .Values.env }}
        - name: "{{ tpl $key $ }}"
          value: "{{ tpl (print $value) $ }}"
{{- end }}
{{- if or .Values.envFromSecret (or .Values.envFromSecrets) }}
        envFrom:
        {{- if .Values.envFromSecret }}
          - secretRef:
              name: {{ tpl .Values.envFromSecret . }}
        {{- end }}
        {{- if .Values.envRenderSecret }}
          - secretRef:
              name: {{ .Release.Name }}-env
        {{- end }}
        {{- range .Values.envFromSecrets }}
          - secretRef:
              name: {{ .name }}
              optional: {{ .optional | default false }}
        {{- end }}
{{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}         
        volumeMounts:
        - name: hostfile
          mountPath: /etc/bytewax
        - name: working-directory
          mountPath: /var/bytewax/
      volumes:
      - name: hostfile
        emptyDir: {}
      - name: python-files
        configMap:
{{- if (.Values.configuration.configMap.customName) }}
          name: {{ .Values.configuration.configMap.customName }}
{{- else }}
          name: {{ .Release.Name }}
{{- end }}
      - name: working-directory
        emptyDir: {}
{{- range .Values.extraSecretMounts }}
{{- if .secretName }}
      - name: {{ .name }}
        secret:
          secretName: {{ .secretName }}
          defaultMode: {{ .defaultMode }}
{{- else if .projected }}
      - name: {{ .name }}
        projected: {{- toYaml .projected | nindent 6 }}
{{- else if .csi }}
      - name: {{ .name }}
        csi: {{- toYaml .csi | nindent 6 }}
{{- end }}
{{- end }}
{{- range .Values.extraVolumeMounts }}
      - name: {{ .name }}
        {{- if .existingClaim }}
        persistentVolumeClaim:
          claimName: {{ .existingClaim }}
        {{- else if .hostPath }}
        hostPath:
          path: {{ .hostPath }}
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }}
{{- end }}